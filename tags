!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC 		= gcc$/;"	m
FLAGS	Makefile	/^FLAGS 	= -g -Wall -Wextra$/;"	m
HEAD	libft/Makefile	/^HEAD = .\/includes$/;"	m
LIB	Makefile	/^LIB =  -L\/usr\/include$/;"	m
LIBFT	Makefile	/^LIBFT = libft$/;"	m
LIBFT_H	libft/includes/libft.h	/^# define LIBFT_H$/;"	d
MAC	Makefile	/^MAC =$/;"	m
MAC_B	Makefile	/^MAC_B =$/;"	m
NAME	Makefile	/^NAME = philo$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME_B	Makefile	/^NAME_B = philo_bonus$/;"	m
OBJ	Makefile	/^OBJ 	= ${SRCS:.c=.o}$/;"	m
OBJ	libft/Makefile	/^OBJ = *.o$/;"	m
OBJS	Makefile	/^OBJS 	= *.o$/;"	m
OBJS_B	Makefile	/^OBJS_B = *.o$/;"	m
OBJ_B	Makefile	/^OBJ_B = ${SRCS_BONUS:.c=.o}$/;"	m
PHILO_H	include/philo.h	/^# define PHILO_H$/;"	d
SRC	libft/Makefile	/^SRC = *.c $/;"	m
SRCS	Makefile	/^SRCS =		main.c						\\$/;"	m
SRCS_BONUS	Makefile	/^SRCS_BONUS =$/;"	m
dead	include/philo.h	/^	int		*dead;$/;"	m	struct:s_philo
destroy_all_mutex	destroy_all.c	/^void	destroy_all_mutex(t_philo **start, int nbr_to_destroy)$/;"	f
eat_one	go_to_life.c	/^void	eat_one(t_philo *moi)$/;"	f
eat_two	go_to_life.c	/^void	eat_two(t_philo *moi)$/;"	f
fill_new	libft/itoa.c	/^void	fill_new(char *new, int sign, int nbr, int j)$/;"	f
fork_l	include/philo.h	/^	pthread_mutex_t	*fork_l;$/;"	m	struct:s_philo
fork_r	include/philo.h	/^	pthread_mutex_t	*fork_r;$/;"	m	struct:s_philo
free_defore_init_fork	destroy_all.c	/^int	free_defore_init_fork(t_philo **start, pthread_mutex_t *out, int *dead, int ret)$/;"	f
ft_atoi	libft/atoi.c	/^int	ft_atoi(char *str)$/;"	f
ft_count_words	libft/strsplit.c	/^static int	ft_count_words(const char *s, char c)$/;"	f	file:
ft_itoa	libft/itoa.c	/^char	*ft_itoa(int nbr)$/;"	f
ft_memalloc	libft/memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memset	libft/memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_strcat	libft/strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strcpy	libft/strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdup	libft/strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strjoin	libft/strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlen	libft/strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strncmp	libft/strncmp.c	/^int	ft_strncmp(char *str, char *to, int n)$/;"	f
ft_strnew	libft/str_new.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strsplit	libft/strsplit.c	/^char	**ft_strsplit(char const *s, char c)$/;"	f
ft_strsub	libft/strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_true_atoi	libft/true_atoi.c	/^int	ft_true_atoi(int *new, char *str)$/;"	f
go_to_life	go_to_life.c	/^int	go_to_life(t_inf *inf)$/;"	f
id	include/philo.h	/^	int 	id;$/;"	m	struct:s_philo
inf	include/philo.h	/^	t_inf	inf;$/;"	m	struct:s_philo
init_a_fork	init.c	/^pthread_mutex_t	*init_a_fork(void)$/;"	f
init_and_deal_fork_to_philo	init.c	/^int	init_and_deal_fork_to_philo(t_philo **start, t_inf *inf)$/;"	f
init_inf	main.c	/^void	init_inf(t_inf *inf)$/;"	f
init_lock	init.c	/^int	*init_lock(void)$/;"	f
init_philo	init.c	/^int	init_philo(t_philo **start, t_inf *inf, pthread_mutex_t *out, int *dead)$/;"	f
init_timeval	init.c	/^int	init_timeval(t_philo **start)$/;"	f
len_int	libft/itoa.c	/^int	len_int(int nbr, int *sign)$/;"	f
lock_l	include/philo.h	/^	int				*lock_l;$/;"	m	struct:s_philo
lock_r	include/philo.h	/^	int				*lock_r;$/;"	m	struct:s_philo
long_atoi	libft/true_atoi.c	/^long	long_atoi(char *str)$/;"	f
main	main.c	/^int	main(int ac, char **av)$/;"	f
nbr_p	include/philo.h	/^	int	nbr_p;$/;"	m	struct:s_inf
only_nbr	libft/true_atoi.c	/^int	only_nbr(char *str)$/;"	f
out	include/philo.h	/^	pthread_mutex_t	*out;$/;"	m	struct:s_philo
parsing	main.c	/^int	parsing(int ac, char **av, t_inf *inf)$/;"	f
routine	go_to_life.c	/^int	routine(t_philo *moi)$/;"	f
s_inf	include/philo.h	/^typedef struct	s_inf$/;"	s
s_philo	include/philo.h	/^struct	s_philo$/;"	s
spliting	libft/strsplit.c	/^void	spliting(int words, char const *s, char c, char **tab)$/;"	f
t_inf	include/philo.h	/^}				t_inf;$/;"	t	typeref:struct:s_inf
t_philo	include/philo.h	/^typedef struct	s_philo		t_philo;$/;"	t	typeref:struct:s_philo
time_die	include/philo.h	/^	int	time_die;$/;"	m	struct:s_inf
time_eat	include/philo.h	/^	int	time_eat;$/;"	m	struct:s_inf
time_reset	include/philo.h	/^	int	time_reset;$/;"	m	struct:s_inf
time_sleep	include/philo.h	/^	int	time_sleep;$/;"	m	struct:s_inf
time_start	include/philo.h	/^	unsigned long long	time_start;$/;"	m	struct:s_philo
time_time_eat	include/philo.h	/^	int	time_time_eat;$/;"	m	struct:s_inf
update_cur_time	go_to_life.c	/^unsigned long long	update_cur_time(unsigned long long start)$/;"	f
update_start	go_to_life.c	/^unsigned long long	update_start(void)$/;"	f
